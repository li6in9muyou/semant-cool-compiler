#!/usr/bin/env bash

actual() {
  mylexer "$1" | myparser | ./semant 2>&1
}

expected() {
  lexer "$1" | parser | semant 2>&1
}

green() {
  printf "\033[0;32m%s\033[0m\n" "$1"
}

red() {
  printf "\033[0;31m%s\033[0m\n" "$1"
}

yellow() {
  printf "\033[0;33m%s\033[0m\n" "$1"
}

sort_by_lineno() {
  sort -n -t ":" -k 2
}

do_make=true

while getopts "q" opt; do
  case $opt in
  q) do_make=false ;;
  *) printf "-q: skip \"make semant\"" && exit 1 ;;
  esac
done
shift $((OPTIND - 1))

case $do_make in
true)
  if ! make -j8 semant; then
    red "BUILD FAILED"
    exit 1
  fi
  ;;
esac

do_test() {
  input_cl=$1
  if [[ ! -f "$input_cl" ]]; then
    red "FILE NOT FOUND $input_cl"
    return
  fi

  if [[ "$input_cl" == *"bad"* ]]; then
    if diff -u --color \
      --label actual <(actual "$input_cl" | grep --invert-match "|" | sort_by_lineno) \
      --label expected <(expected "$input_cl" | sort_by_lineno); then
      echo 1 >>passed
    else
      red FAIL
      echo "$input_cl" >>failed_input
    fi
  else
    # does not sort to preserve valid AST in diff'ing
    if diff -u --color \
      --label actual <(actual "$input_cl" | grep --invert-match "|") \
      --label expected <(expected "$input_cl"); then
      echo 1 >>passed
    else
      red FAIL
      echo "$input_cl" >>failed_input
    fi
  fi
}

trap "rm -f passed total failed_input" EXIT
for input_cl in "$@"; do
  echo 1 >>total
  ((i = i % 8))
  ((i++ == 0)) && wait
  do_test "$input_cl" &
done
wait

echo
t=$(wc total -l)
p=$(wc passed -l)
yellow "SUMMARY: $p / $t"

if test -f failed_input; then
  red "FAILED FILES"
  red "$(uniq failed_input)"
  echo
fi
